datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(uuid())
  email String @unique
  name  String
  role  Role   @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  password      Password?
  notes         Note[]
  checks        Check[]
  todos         Todo[]
  totifications Notification[]
  machines      Machine[]
  shedules      Schedule[]
  issues        Issue[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Check {
  id      String  @id @default(uuid())
  
  name    String
  value   Float?
  text    String?
  comment String?
  status  Status?
  scheduledAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)
  state     State    @default(OPEN)

  userId    String
  todoId    String?
  machineId String?

  user    User     @relation(fields: [userId], references: [id])
  todo    Todo?    @relation(fields: [todoId], references: [id])
  machine Machine? @relation(fields: [machineId], references: [id])
}

model Todo {
  id String @id @default(uuid())

  remark     String?
  title      String
  definition String?
  method     String?
  location   String?
  criteria   String?
  record     String?
  comments   String?

  userId      String
  referenceId String
  articleId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  periodic Periodic @default(UNKNOWN)

  checks        Check[]
  schedules     Schedule[]
  notifications Notification[]

  user      User      @relation(fields: [userId], references: [id])
  article   Article   @relation(fields: [articleId], references: [id])
  reference Reference @relation(fields: [referenceId], references: [id])
}

model Article {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  todos Todo[]
}

model Reference {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  todos Todo[]
}

model Machine {
  id String @id @default(uuid())

  name         String
  year         Int?
  manufacturer String?
  serialNumber String?
  department   Departmnet?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  notifications Notification[]
  checks        Check[]
  schedules     Schedule[]
  issues        Issue[]
}

model Schedule {
  id   String   @id @default(uuid())
  date DateTime
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  userId    String
  todoId    String?
  machineId String?

  user    User     @relation(fields: [userId], references: [id])
  todo    Todo?    @relation(fields: [todoId], references: [id])
  machine Machine? @relation(fields: [machineId], references: [id])
}

model Notification {
  id String @id @default(uuid())

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  userId    String
  todoId    String?
  machineId String?

  user    User     @relation(fields: [userId], references: [id])
  todo    Todo?    @relation(fields: [todoId], references: [id])
  machine Machine? @relation(fields: [machineId], references: [id])
}

model Issue {
  id    String @id @default(uuid())
  name  String
  state State  @default(OPEN)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  machineId String?
  userId    String

  machine Machine? @relation(fields: [machineId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  USER
}

enum Status {
  SUCCESS
  WARNING
  ERROR
}

enum State {
  OPEN
  CLOSED
}

enum Periodic {
  UNKNOWN
  DAY
  WEEK
  MONTH
  YEAR
}

enum Departmnet {
  GLASS
  ALUMINUM
  FURNITURE
  STK
}
